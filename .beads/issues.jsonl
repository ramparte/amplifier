{"id":"bd-1","title":"Safety Guard System with Pre-Tool-Use Hooks","description":"Implement safety guard system to prevent dangerous operations like force push, test skipping, and unverified assumptions. Based on claude_template's hook system. Phases: Core infrastructure, Git guards, Test guards, Assumption detection, Documentation.","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-14T22:46:03.968768025Z","updated_at":"2025-10-14T22:46:03.968768025Z"}
{"id":"bd-10","title":"Phase 5: Beads Integration","description":"","design":"Phase 5: Beads Integration\n\nTESTS FIRST (RED):\n- test_beads_evidence.py: Test evidence tracking in beads issues\n- test_beads_blocking.py: Test blocking issue closure without evidence\n- Antagonistic tests: Closing without evidence, tampering with evidence\n\nIMPLEMENTATION (GREEN):\n- Extensions to amplifier/bplan/beads_integration.py:\n  * add_evidence() method to BeadsClient\n  * validate_evidence() before close_issue()\n  * evidence field in BeadsIssue dataclass\n  \nINTEGRATION POINTS:\n- Store evidence in beads issue metadata\n- Block issue closure without evidence\n- Link to evidence files in .beads/evidence/\n\nACCEPTANCE CRITERIA:\n✓ Evidence tracked in beads issues\n✓ Cannot close issue without evidence\n✓ Evidence retrievable from beads\n✓ Integration with existing beads workflow seamless\n✓ Integration tests pass with real beads\n\nDEPENDENCIES: Phases 1,2,3 (all validation types)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-14T22:59:17.610232625Z","updated_at":"2025-10-14T23:05:31.477700271Z","external_ref":"blocks:bd-3"}
{"id":"bd-11","title":"Phase 6: Agent Visibility and Invocation","description":"","design":"Phase 6: Agent Visibility and Invocation\n\nTESTS FIRST (RED):\n- test_agent_interface.py: Test CLI and API access\n- test_agent_discovery.py: Test agents can find and invoke system\n- Antagonistic tests: Unauthorized access, malformed requests\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/agent_interface.py:\n  * CLI commands: validate-code, validate-design, check-evidence\n  * Agent API: Simple function calls from any agent\n  * Documentation for agent integration\n  \nVISIBILITY MECHANISMS:\n- CLI commands in Makefile\n- Python API importable from any agent\n- Clear examples in agent documentation\n\nACCEPTANCE CRITERIA:\n✓ CLI commands work from terminal\n✓ Agents can import and call validation functions\n✓ All existing agents updated with examples\n✓ Documentation includes invocation patterns\n✓ Integration tests pass with multiple agents\n\nDEPENDENCIES: Phases 1-5 (complete system)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-14T22:59:22.248014797Z","updated_at":"2025-10-14T23:05:33.238473802Z","external_ref":"blocks:bd-3"}
{"id":"bd-12","title":"Phase 7: Documentation, Examples, and Meta-Validation","description":"","design":"Phase 7: Documentation, Examples, and Meta-Validation\n\nTESTS FIRST (RED):\n- test_meta_validation.py: System validates itself using own evidence\n- test_documentation_completeness.py: Verify all docs exist\n- test_examples_work.py: Run all examples and verify they work\n- Antagonistic tests: Incomplete docs, broken examples, circular validation\n\nIMPLEMENTATION (GREEN):\n- docs/evidence_system/README.md: Complete system documentation\n- docs/evidence_system/code_workflow_example.md: 3-agent workflow walkthrough\n- docs/evidence_system/design_workflow_example.md: Design review walkthrough\n- docs/evidence_system/agent_integration.md: How agents use the system\n- Meta-validation implementation: System validates own success criteria\n\nMETA-VALIDATION REQUIREMENTS:\nUse the evidence system to prove all 7 success criteria met:\n1. Code workflow → Evidence from test runs\n2. Design workflow → Evidence from reviews\n3. TodoWrite integration → Evidence from integration tests\n4. Beads integration → Evidence from beads operations\n5. Documentation → Evidence that docs exist and are complete\n6. Agent visibility → Evidence agents can invoke system\n7. Meta-validation → This evidence itself\n\nACCEPTANCE CRITERIA:\n✓ Complete documentation for both workflows\n✓ Working examples for code and design validation\n✓ All agents have integration examples\n✓ Meta-validation proves all criteria met using own evidence\n✓ System can validate its own completion\n\nDEPENDENCIES: Phases 1-6 (everything)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-14T22:59:26.281083706Z","updated_at":"2025-10-14T23:05:35.177602673Z","external_ref":"blocks:bd-3"}
{"id":"bd-2","title":"Code Search MCP Server with Semantic Indexing","description":"Build MCP server for code search with AST-based indexing and semantic duplicate detection. Prevents recreating existing functionality. Phases: MCP infrastructure, AST parsing, SQLite indexing, Search API, Semantic embeddings (optional), File watching.","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-14T22:46:17.67930276Z","updated_at":"2025-10-14T22:46:17.67930276Z"}
{"id":"bd-3","title":"Evidence-Required Todo System Enhancement","description":"Enhance TodoWrite workflow to require evidence (test output, logs, screenshots) when marking tasks complete. Enforces 'trust but verify' principle. Phases: Evidence field addition, Validation logic, Documentation and examples.","status":"in_progress","priority":0,"issue_type":"epic","created_at":"2025-10-14T22:46:19.126326408Z","updated_at":"2025-10-14T22:58:09.079076564Z"}
{"id":"bd-4","title":"Meta-Cognitive Anti-Pattern Detection System","description":"Detect poor AI reasoning patterns: infrastructure blame, theory lock-in, rabbit holes, excuse making. Improves AI reasoning quality. Phases: Pattern library, Detection system, Intervention mechanisms, Integration with agents, Documentation.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-14T22:46:20.893989085Z","updated_at":"2025-10-14T22:46:20.893989085Z"}
{"id":"bd-5","title":"Rule #0 Enforcement - Mandatory Context Loading","description":"Formalize mandatory first-actions protocol: Read CLAUDE.md, check DISCOVERIES.md, search for rules. Optional verification hook. Phases: CLAUDE.md enhancement with checklist, Optional hook implementation.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-14T22:46:22.721423612Z","updated_at":"2025-10-14T22:46:22.721423612Z"}
{"id":"bd-6","title":"Phase 1: Core Evidence System - Data Models and Validation Logic","description":"","design":"Phase 1: Core Evidence System - Data Models and Validation Logic\n\nTESTS FIRST (RED):\n- test_evidence_store.py: Test evidence creation, retrieval, validation\n- test_golden_file_handler.py: Test golden file generation and reproduction\n- test_validation_interfaces.py: Test code and design validation contracts\n- Antagonistic tests: Invalid evidence formats, missing fields, tampered files\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/evidence_system.py:\n  * EvidenceStore class (file-based .beads/evidence/)\n  * Evidence dataclass (type, content, timestamp, validator_id)\n  * GoldenFileHandler class (generate, compare, reproduce)\n  * ValidationInterface protocol (validate_code, validate_design)\n  \nACCEPTANCE CRITERIA:\n✓ All tests pass with real file I/O\n✓ Evidence stored and retrieved correctly\n✓ Golden files generate/compare byte-for-byte\n✓ Validation interface contracts defined\n✓ No mocks (real filesystem operations)\n\nDEPENDENCIES: None (foundational phase)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T22:58:59.419008531Z","updated_at":"2025-10-14T23:30:16.116741779Z","closed_at":"2025-10-14T23:30:16.116741779Z","external_ref":"blocks:bd-3"}
{"id":"bd-7","title":"Phase 2: 3-Agent Code Workflow - Spec Writer, Coder, Blind Tester","description":"","design":"Phase 2: 3-Agent Code Workflow - Spec Writer, Coder, Blind Tester\n\nCRITICAL: Golden File Anti-Cheat Protocol\n\nGOLDEN FILE WORKFLOW (PREVENTS CHEATING):\n1. Agent 1 (Spec Writer) creates BOTH:\n   - test_module.py (test code that calls implementation)\n   - golden_output.txt (expected correct output)\n   - Stores golden files in .beads/evidence/golden/ (restricted directory)\n   - Agent 1 is TRUSTED to create correct golden files (like teacher's answer key)\n\n2. Agent 2 (Coder) sees ONLY:\n   - test_module.py (test logic and function calls)\n   - Test descriptions explaining expected behavior\n   - CANNOT access .beads/evidence/golden/ directory (filesystem restriction)\n   - Must implement correct logic from test descriptions alone\n   \n3. Agent 3 (Blind Tester) validates:\n   - Runs Agent 2's implementation in isolated subprocess\n   - Loads golden files from .beads/evidence/golden/\n   - Compares actual output vs golden output (byte-for-byte)\n   - Has zero context from Agent 1 or Agent 2's process\n\nANTI-CHEAT ENFORCEMENT MECHANISMS:\n✓ Filesystem access control: Agent 2 subprocess cannot read golden directory\n✓ Process isolation: Each agent runs in separate subprocess (no shared memory)\n✓ Path restrictions: Golden file paths hidden in environment variables\n✓ Validation: Agent 3 verifies golden files weren't accessed by Agent 2\n\nTESTS FIRST (RED):\n- test_spec_writer_creates_golden_files.py: Verify Agent 1 creates both test + golden\n- test_coder_cannot_access_golden.py: ANTAGONISTIC - Agent 2 tries to read golden, fails\n- test_filesystem_isolation.py: Verify subprocess cannot access restricted paths\n- test_blind_validation.py: Verify Agent 3 validates in clean subprocess\n- test_cheat_detection.py: ANTAGONISTIC - Detect all cheating attempts\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/three_agent_workflow.py:\n  * SpecWriterAgent class:\n    - create_test_and_golden() -\u003e creates both files\n    - store_golden_file() -\u003e saves to restricted .beads/evidence/golden/\n  * CoderAgent class:\n    - Runs in subprocess with restricted filesystem access\n    - Environment excludes golden file paths\n    - Cannot read .beads/evidence/golden/ directory\n  * BlindTesterAgent class:\n    - Fresh subprocess, zero shared context\n    - Loads golden files with full access\n    - Byte-for-byte comparison of actual vs expected\n  * FilesystemRestrictor:\n    - Enforces access controls on subprocess\n    - Validates no golden file access occurred\n    - Logs any access attempts as cheating\n  * WorkflowOrchestrator:\n    - Coordinates 3 agents with strict isolation\n    - Verifies each phase's integrity\n    - Produces evidence of validation\n\nEXAMPLE TEST THAT PREVENTS CHEATING:\n```python\ndef test_coder_cannot_cheat():\n    # Agent 1 creates golden file\n    golden_path = spec_writer.create_golden(\"expected_output.txt\", \"42\")\n    \n    # Agent 2 tries to implement\n    coder_env = create_restricted_environment(exclude_golden_dir=True)\n    result = coder.implement_in_subprocess(\n        test_code=\"assert calculator.compute() == ???\",  # Doesn't know it's 42\n        environment=coder_env\n    )\n    \n    # Verify coder never accessed golden file\n    assert not coder_env.accessed_path(golden_path)\n    \n    # Agent 3 validates (has golden access)\n    blind_tester = BlindTesterAgent(golden_access=True)\n    assert blind_tester.validate(result, golden_path)\n```\n\nACCEPTANCE CRITERIA:\n✓ Spec writer creates both test + golden files\n✓ Golden files stored in restricted directory\n✓ Coder subprocess CANNOT access golden directory (verified by tests)\n✓ All attempts to access golden files detected and blocked\n✓ Blind tester validates in isolated subprocess with clean context\n✓ Byte-for-byte reproduction of golden files required\n✓ Antagonistic tests catch all cheating attempts\n✓ Integration tests pass with real filesystem restrictions\n\nDEPENDENCIES: Phase 1 (evidence system, golden file handler)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T22:59:01.087606433Z","updated_at":"2025-10-15T00:22:27.408124538Z","closed_at":"2025-10-15T00:22:27.408124538Z","external_ref":"blocks:bd-3"}
{"id":"bd-8","title":"Phase 3: Design TODO Independent Review Workflow","description":"","design":"Phase 3: Design TODO Independent Review Workflow\n\nTESTS FIRST (RED):\n- test_design_reviewer.py: Test context-free validation\n- test_requirement_matcher.py: Test user req vs design output comparison\n- Antagonistic tests: Context pollution detection, biased reviews\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/design_review.py:\n  * DesignReviewer class (context-free LLM or code-based)\n  * RequirementMatcher (compares user req vs design output)\n  * IndependentValidator (ensures no context pollution)\n  \nVALIDATION OPTIONS:\n1. Code-based: Template matching, checklist validation\n2. LLM-based: Fresh context, no prior conversation history\n\nACCEPTANCE CRITERIA:\n✓ Reviewer has zero context from original TODO creation\n✓ Validation compares user req vs design output accurately\n✓ Context pollution detection works\n✓ Both code-based and LLM-based validators implemented\n✓ Integration tests pass\n\nDEPENDENCIES: Phase 1 (evidence system)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T22:59:04.774530827Z","updated_at":"2025-10-15T00:36:54.224279827Z","closed_at":"2025-10-15T00:36:54.224279827Z","external_ref":"blocks:bd-3"}
{"id":"bd-9","title":"Phase 4: TodoWrite Integration","description":"","design":"Phase 4: TodoWrite Integration\n\nTESTS FIRST (RED):\n- test_todowrite_evidence.py: Test evidence requirement on completion\n- test_evidence_blocking.py: Test strict blocking without evidence\n- Antagonistic tests: Completing without evidence, weak evidence, fake evidence\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/todowrite_integration.py:\n  * EvidenceRequiredTodo class (extends todo with evidence field)\n  * CompletionValidator (checks evidence before marking complete)\n  * BlockingEnforcer (prevents completion without evidence)\n  \nINTEGRATION POINTS:\n- Hook into TodoWrite completion flow\n- Add evidence field to todo data structure\n- Validate evidence before allowing completion\n\nACCEPTANCE CRITERIA:\n✓ Cannot mark todo complete without evidence\n✓ Evidence validated before completion\n✓ TodoWrite tool works seamlessly with evidence system\n✓ All blocking attempts work correctly\n✓ Integration tests pass with real TodoWrite\n\nDEPENDENCIES: Phases 1,2,3 (all validation types)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-14T22:59:11.521613419Z","updated_at":"2025-10-14T23:05:29.718851581Z","external_ref":"blocks:bd-3"}
