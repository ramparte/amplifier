{"id": "bd-1", "title": "Safety Guard System with Pre-Tool-Use Hooks", "description": "Implement safety guard system to prevent dangerous operations like force push, test skipping, and unverified assumptions. Based on claude_template's hook system. Phases: Core infrastructure, Git guards, Test guards, Assumption detection, Documentation.", "status": "open", "priority": 0, "issue_type": "epic", "created_at": "2025-10-14T22:46:03.968768025Z", "updated_at": "2025-10-14T22:46:03.968768025Z"}
{"id": "bd-10", "title": "Phase 5: Beads Integration", "description": "", "design": "Phase 5: Beads Integration\n\nTESTS FIRST (RED):\n- test_beads_evidence.py: Test evidence tracking in beads issues\n- test_beads_blocking.py: Test blocking issue closure without evidence\n- Antagonistic tests: Closing without evidence, tampering with evidence\n\nIMPLEMENTATION (GREEN):\n- Extensions to amplifier/bplan/beads_integration.py:\n  * add_evidence() method to BeadsClient\n  * validate_evidence() before close_issue()\n  * evidence field in BeadsIssue dataclass\n  \nINTEGRATION POINTS:\n- Store evidence in beads issue metadata\n- Block issue closure without evidence\n- Link to evidence files in .beads/evidence/\n\nACCEPTANCE CRITERIA:\n\u2713 Evidence tracked in beads issues\n\u2713 Cannot close issue without evidence\n\u2713 Evidence retrievable from beads\n\u2713 Integration with existing beads workflow seamless\n\u2713 Integration tests pass with real beads\n\nDEPENDENCIES: Phases 1,2,3 (all validation types)", "status": "open", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:59:17.610232625Z", "updated_at": "2025-10-14T23:05:31.477700271Z", "external_ref": "blocks:bd-3"}
{"id": "bd-11", "title": "Phase 6: Agent Visibility and Invocation", "description": "", "design": "Phase 6: Agent Visibility and Invocation\n\nTESTS FIRST (RED):\n- test_agent_interface.py: Test CLI and API access\n- test_agent_discovery.py: Test agents can find and invoke system\n- Antagonistic tests: Unauthorized access, malformed requests\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/agent_interface.py:\n  * CLI commands: validate-code, validate-design, check-evidence\n  * Agent API: Simple function calls from any agent\n  * Documentation for agent integration\n  \nVISIBILITY MECHANISMS:\n- CLI commands in Makefile\n- Python API importable from any agent\n- Clear examples in agent documentation\n\nACCEPTANCE CRITERIA:\n\u2713 CLI commands work from terminal\n\u2713 Agents can import and call validation functions\n\u2713 All existing agents updated with examples\n\u2713 Documentation includes invocation patterns\n\u2713 Integration tests pass with multiple agents\n\nDEPENDENCIES: Phases 1-5 (complete system)", "status": "closed", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:59:22.248014797Z", "updated_at": "2025-10-15T19:30:00.048425+00:00", "external_ref": "blocks:bd-3", "closed_at": "2025-10-15T19:30:00.048415+00:00"}
{"id": "bd-12", "title": "Phase 7: Documentation, Examples, and Meta-Validation", "description": "", "design": "Phase 7: Documentation, Examples, and Meta-Validation\n\nTESTS FIRST (RED):\n- test_meta_validation.py: System validates itself using own evidence\n- test_documentation_completeness.py: Verify all docs exist\n- test_examples_work.py: Run all examples and verify they work\n- Antagonistic tests: Incomplete docs, broken examples, circular validation\n\nIMPLEMENTATION (GREEN):\n- docs/evidence_system/README.md: Complete system documentation\n- docs/evidence_system/code_workflow_example.md: 3-agent workflow walkthrough\n- docs/evidence_system/design_workflow_example.md: Design review walkthrough\n- docs/evidence_system/agent_integration.md: How agents use the system\n- Meta-validation implementation: System validates own success criteria\n\nMETA-VALIDATION REQUIREMENTS:\nUse the evidence system to prove all 7 success criteria met:\n1. Code workflow \u2192 Evidence from test runs\n2. Design workflow \u2192 Evidence from reviews\n3. TodoWrite integration \u2192 Evidence from integration tests\n4. Beads integration \u2192 Evidence from beads operations\n5. Documentation \u2192 Evidence that docs exist and are complete\n6. Agent visibility \u2192 Evidence agents can invoke system\n7. Meta-validation \u2192 This evidence itself\n\nACCEPTANCE CRITERIA:\n\u2713 Complete documentation for both workflows\n\u2713 Working examples for code and design validation\n\u2713 All agents have integration examples\n\u2713 Meta-validation proves all criteria met using own evidence\n\u2713 System can validate its own completion\n\nDEPENDENCIES: Phases 1-6 (everything)", "status": "open", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:59:26.281083706Z", "updated_at": "2025-10-14T23:05:35.177602673Z", "external_ref": "blocks:bd-3"}
{"id": "bd-2", "title": "Code Search MCP Server with Semantic Indexing", "description": "Build MCP server for code search with AST-based indexing and semantic duplicate detection. Prevents recreating existing functionality. Phases: MCP infrastructure, AST parsing, SQLite indexing, Search API, Semantic embeddings (optional), File watching.", "status": "open", "priority": 0, "issue_type": "epic", "created_at": "2025-10-14T22:46:17.67930276Z", "updated_at": "2025-10-14T22:46:17.67930276Z"}
{"id": "bd-3", "title": "Evidence-Required Todo System Enhancement", "description": "Enhance TodoWrite workflow to require evidence (test output, logs, screenshots) when marking tasks complete. Enforces 'trust but verify' principle. Phases: Evidence field addition, Validation logic, Documentation and examples.", "status": "in_progress", "priority": 0, "issue_type": "epic", "created_at": "2025-10-14T22:46:19.126326408Z", "updated_at": "2025-10-14T22:58:09.079076564Z"}
{"id": "bd-4", "title": "Meta-Cognitive Anti-Pattern Detection System", "description": "Detect poor AI reasoning patterns: infrastructure blame, theory lock-in, rabbit holes, excuse making. Improves AI reasoning quality. Phases: Pattern library, Detection system, Intervention mechanisms, Integration with agents, Documentation.", "status": "open", "priority": 1, "issue_type": "epic", "created_at": "2025-10-14T22:46:20.893989085Z", "updated_at": "2025-10-14T22:46:20.893989085Z"}
{"id": "bd-5", "title": "Rule #0 Enforcement - Mandatory Context Loading", "description": "Formalize mandatory first-actions protocol: Read CLAUDE.md, check DISCOVERIES.md, search for rules. Optional verification hook. Phases: CLAUDE.md enhancement with checklist, Optional hook implementation.", "status": "open", "priority": 2, "issue_type": "epic", "created_at": "2025-10-14T22:46:22.721423612Z", "updated_at": "2025-10-14T22:46:22.721423612Z"}
{"id": "bd-6", "title": "Phase 1: Core Evidence System - Data Models and Validation Logic", "description": "", "design": "Phase 1: Core Evidence System - Data Models and Validation Logic\n\nTESTS FIRST (RED):\n- test_evidence_store.py: Test evidence creation, retrieval, validation\n- test_golden_file_handler.py: Test golden file generation and reproduction\n- test_validation_interfaces.py: Test code and design validation contracts\n- Antagonistic tests: Invalid evidence formats, missing fields, tampered files\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/evidence_system.py:\n  * EvidenceStore class (file-based .beads/evidence/)\n  * Evidence dataclass (type, content, timestamp, validator_id)\n  * GoldenFileHandler class (generate, compare, reproduce)\n  * ValidationInterface protocol (validate_code, validate_design)\n  \nACCEPTANCE CRITERIA:\n\u2713 All tests pass with real file I/O\n\u2713 Evidence stored and retrieved correctly\n\u2713 Golden files generate/compare byte-for-byte\n\u2713 Validation interface contracts defined\n\u2713 No mocks (real filesystem operations)\n\nDEPENDENCIES: None (foundational phase)", "status": "closed", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:58:59.419008531Z", "updated_at": "2025-10-14T23:30:16.116741779Z", "closed_at": "2025-10-14T23:30:16.116741779Z", "external_ref": "blocks:bd-3"}
{"id": "bd-7", "title": "Phase 2: 3-Agent Code Workflow - Spec Writer, Coder, Blind Tester", "description": "", "design": "Phase 2: 3-Agent Code Workflow - Spec Writer, Coder, Blind Tester\n\nCRITICAL: Golden File Anti-Cheat Protocol\n\nGOLDEN FILE WORKFLOW (PREVENTS CHEATING):\n1. Agent 1 (Spec Writer) creates BOTH:\n   - test_module.py (test code that calls implementation)\n   - golden_output.txt (expected correct output)\n   - Stores golden files in .beads/evidence/golden/ (restricted directory)\n   - Agent 1 is TRUSTED to create correct golden files (like teacher's answer key)\n\n2. Agent 2 (Coder) sees ONLY:\n   - test_module.py (test logic and function calls)\n   - Test descriptions explaining expected behavior\n   - CANNOT access .beads/evidence/golden/ directory (filesystem restriction)\n   - Must implement correct logic from test descriptions alone\n   \n3. Agent 3 (Blind Tester) validates:\n   - Runs Agent 2's implementation in isolated subprocess\n   - Loads golden files from .beads/evidence/golden/\n   - Compares actual output vs golden output (byte-for-byte)\n   - Has zero context from Agent 1 or Agent 2's process\n\nANTI-CHEAT ENFORCEMENT MECHANISMS:\n\u2713 Filesystem access control: Agent 2 subprocess cannot read golden directory\n\u2713 Process isolation: Each agent runs in separate subprocess (no shared memory)\n\u2713 Path restrictions: Golden file paths hidden in environment variables\n\u2713 Validation: Agent 3 verifies golden files weren't accessed by Agent 2\n\nTESTS FIRST (RED):\n- test_spec_writer_creates_golden_files.py: Verify Agent 1 creates both test + golden\n- test_coder_cannot_access_golden.py: ANTAGONISTIC - Agent 2 tries to read golden, fails\n- test_filesystem_isolation.py: Verify subprocess cannot access restricted paths\n- test_blind_validation.py: Verify Agent 3 validates in clean subprocess\n- test_cheat_detection.py: ANTAGONISTIC - Detect all cheating attempts\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/three_agent_workflow.py:\n  * SpecWriterAgent class:\n    - create_test_and_golden() -> creates both files\n    - store_golden_file() -> saves to restricted .beads/evidence/golden/\n  * CoderAgent class:\n    - Runs in subprocess with restricted filesystem access\n    - Environment excludes golden file paths\n    - Cannot read .beads/evidence/golden/ directory\n  * BlindTesterAgent class:\n    - Fresh subprocess, zero shared context\n    - Loads golden files with full access\n    - Byte-for-byte comparison of actual vs expected\n  * FilesystemRestrictor:\n    - Enforces access controls on subprocess\n    - Validates no golden file access occurred\n    - Logs any access attempts as cheating\n  * WorkflowOrchestrator:\n    - Coordinates 3 agents with strict isolation\n    - Verifies each phase's integrity\n    - Produces evidence of validation\n\nEXAMPLE TEST THAT PREVENTS CHEATING:\n```python\ndef test_coder_cannot_cheat():\n    # Agent 1 creates golden file\n    golden_path = spec_writer.create_golden(\"expected_output.txt\", \"42\")\n    \n    # Agent 2 tries to implement\n    coder_env = create_restricted_environment(exclude_golden_dir=True)\n    result = coder.implement_in_subprocess(\n        test_code=\"assert calculator.compute() == ???\",  # Doesn't know it's 42\n        environment=coder_env\n    )\n    \n    # Verify coder never accessed golden file\n    assert not coder_env.accessed_path(golden_path)\n    \n    # Agent 3 validates (has golden access)\n    blind_tester = BlindTesterAgent(golden_access=True)\n    assert blind_tester.validate(result, golden_path)\n```\n\nACCEPTANCE CRITERIA:\n\u2713 Spec writer creates both test + golden files\n\u2713 Golden files stored in restricted directory\n\u2713 Coder subprocess CANNOT access golden directory (verified by tests)\n\u2713 All attempts to access golden files detected and blocked\n\u2713 Blind tester validates in isolated subprocess with clean context\n\u2713 Byte-for-byte reproduction of golden files required\n\u2713 Antagonistic tests catch all cheating attempts\n\u2713 Integration tests pass with real filesystem restrictions\n\nDEPENDENCIES: Phase 1 (evidence system, golden file handler)", "status": "closed", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:59:01.087606433Z", "updated_at": "2025-10-15T00:22:27.408124538Z", "closed_at": "2025-10-15T00:22:27.408124538Z", "external_ref": "blocks:bd-3"}
{"id": "bd-8", "title": "Phase 3: Design TODO Independent Review Workflow", "description": "", "design": "Phase 3: Design TODO Independent Review Workflow\n\nTESTS FIRST (RED):\n- test_design_reviewer.py: Test context-free validation\n- test_requirement_matcher.py: Test user req vs design output comparison\n- Antagonistic tests: Context pollution detection, biased reviews\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/design_review.py:\n  * DesignReviewer class (context-free LLM or code-based)\n  * RequirementMatcher (compares user req vs design output)\n  * IndependentValidator (ensures no context pollution)\n  \nVALIDATION OPTIONS:\n1. Code-based: Template matching, checklist validation\n2. LLM-based: Fresh context, no prior conversation history\n\nACCEPTANCE CRITERIA:\n\u2713 Reviewer has zero context from original TODO creation\n\u2713 Validation compares user req vs design output accurately\n\u2713 Context pollution detection works\n\u2713 Both code-based and LLM-based validators implemented\n\u2713 Integration tests pass\n\nDEPENDENCIES: Phase 1 (evidence system)", "status": "closed", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:59:04.774530827Z", "updated_at": "2025-10-15T00:36:54.224279827Z", "closed_at": "2025-10-15T00:36:54.224279827Z", "external_ref": "blocks:bd-3"}
{"id": "bd-9", "title": "Phase 4: TodoWrite Integration", "description": "", "design": "Phase 4: TodoWrite Integration\n\nTESTS FIRST (RED):\n- test_todowrite_evidence.py: Test evidence requirement on completion\n- test_evidence_blocking.py: Test strict blocking without evidence\n- Antagonistic tests: Completing without evidence, weak evidence, fake evidence\n\nIMPLEMENTATION (GREEN):\n- amplifier/bplan/todowrite_integration.py:\n  * EvidenceRequiredTodo class (extends todo with evidence field)\n  * CompletionValidator (checks evidence before marking complete)\n  * BlockingEnforcer (prevents completion without evidence)\n  \nINTEGRATION POINTS:\n- Hook into TodoWrite completion flow\n- Add evidence field to todo data structure\n- Validate evidence before allowing completion\n\nACCEPTANCE CRITERIA:\n\u2713 Cannot mark todo complete without evidence\n\u2713 Evidence validated before completion\n\u2713 TodoWrite tool works seamlessly with evidence system\n\u2713 All blocking attempts work correctly\n\u2713 Integration tests pass with real TodoWrite\n\nDEPENDENCIES: Phases 1,2,3 (all validation types)", "status": "open", "priority": 0, "issue_type": "task", "created_at": "2025-10-14T22:59:11.521613419Z", "updated_at": "2025-10-14T23:05:29.718851581Z", "external_ref": "blocks:bd-3"}
