workflow:
  name: "pr-review"
  description: "Pull request review with conditional paths based on PR size"

  context:
    pr_number: "${PR_NUMBER}"
    repo: "${REPO_NAME}"

nodes:
  - id: "check-size"
    name: "Check PR Size"
    prompt: |
      Check if PR #{pr_number} in {repo} has more than 500 lines changed.

      Return JSON with:
      - is_large: true if > 500 lines, false otherwise
      - lines_changed: actual number of lines
      - files_changed: number of files modified
    outputs:
      - is_large
      - lines_changed
      - files_changed
    next:
      - when: "{is_large} == true"
        goto: "deep-review"
      - default: "quick-review"

  - id: "quick-review"
    name: "Quick Review"
    prompt: |
      Perform a quick review of PR #{pr_number} with {lines_changed} lines across {files_changed} files.

      Focus on:
      - Code style and formatting
      - Obvious bugs or issues
      - Basic best practices

      Return JSON with:
      - approved: true/false
      - issues: list of any issues found
      - comments: review comments
    outputs:
      - approved
      - issues
      - comments
    next: "done"

  - id: "deep-review"
    name: "Deep Review"
    agent: "zen-architect"
    prompt: |
      Perform a thorough architecture review of PR #{pr_number}.

      This is a large PR with {lines_changed} lines across {files_changed} files.

      Analyze:
      - Architecture implications
      - Design patterns and principles
      - Scalability and maintainability
      - Breaking changes
      - Migration requirements

      Return JSON with:
      - architecture_concerns: list of concerns
      - design_quality: rating 1-10
      - requires_security_review: true/false
      - summary: overall assessment
    outputs:
      - architecture_concerns
      - design_quality
      - requires_security_review
      - architecture_summary
    next:
      - when: "{requires_security_review} == true"
        goto: "security-check"
      - default: "finalize"

  - id: "security-check"
    name: "Security Review"
    agent: "security-guardian"
    prompt: |
      Perform security review of PR #{pr_number}.

      Architecture concerns:
      {architecture_concerns}

      Check for:
      - Security vulnerabilities
      - Data exposure risks
      - Authentication/authorization issues
      - Input validation
      - Injection vulnerabilities

      Return JSON with:
      - security_issues: list of security issues found
      - severity: overall severity (low/medium/high/critical)
      - approved: true if safe, false if issues found
      - recommendations: security recommendations
    outputs:
      - security_issues
      - security_severity
      - security_approved
      - security_recommendations
    retry_on_failure: 2
    next: "finalize"

  - id: "finalize"
    name: "Finalize Review"
    prompt: |
      Create final PR review summary.

      Available data:
      - Lines changed: {lines_changed}
      - Files changed: {files_changed}
      - Architecture summary: {architecture_summary}
      - Security severity: {security_severity}

      Provide:
      1. Overall recommendation (Approve/Request Changes/Reject)
      2. Key points for reviewer attention
      3. Required actions before merge
      4. Estimated risk level
    outputs:
      - final_recommendation
      - key_points
      - required_actions
      - risk_level
    next: "done"

  - id: "done"
    name: "Complete"
    prompt: "Workflow complete"
    type: "terminal"
